from AFR_DR import AFR_DR
import argparse
from utils import *

"""parsing and configuration"""
def parse_args():
    desc = "Tensorflow implementation of AFR-Net"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--phase', type=str, default='train', help='train or test ?')

    parser.add_argument('--epoch', type=int, default=300, help='The number of epochs to run')
    parser.add_argument('--iteration', type=int, default=861, help='The number of training iterations')
    parser.add_argument('--gbatch_size', type=int, default=1, help='The global batchsize for calculating iterations')
    parser.add_argument('--lbatch_size', type=int, default=48, help='The local batchsize for model runing during each iteration')
    parser.add_argument('--patch_size', type=int, default=80, help='The image size during training')
    parser.add_argument('--patch_stride', type=int, default=80, help='Moving stride when cutting patches')
    parser.add_argument('--print_freq', type=int, default=8610, help='The number of image_print_freqy')
    parser.add_argument('--save_freq', type=int, default=172200, help='The number of ckpt_save_freq')


    parser.add_argument('--init_lr', type=float, default=1e-4, help='learning rate for generator')
    parser.add_argument('--decay_flag', type=str2bool, default=True, help='whether to decay LR or Not')
    parser.add_argument('--decay_epoch', type=float, default=200, help='learning rate for generator')

    parser.add_argument('--beta1', type=float, default=0.5, help='beta1 for Adam optimizer')
    parser.add_argument('--beta2', type=float, default=0.999, help='beta2 for Adam optimizer')
    parser.add_argument('--dropout_rate', type=float, default=0, help='dropout rate for dense block')

    parser.add_argument('--alpha1', type=float, default=10, help='weight for reconstruction loss')
    parser.add_argument('--alpha2', type=float, default=1e-1, help='weight for perceptual loss')
    parser.add_argument('--alpha3', type=float, default=5e-1, help='weight for adversarial loss')

    parser.add_argument('--gan_type', type=str, default='lsgan', help='[gan / lsgan / hinge]')
    parser.add_argument('--ngf', type=int, default=32, help='Basic number of filters for generator')
    parser.add_argument('--ndf', type=int, default=16, help='Basic number of filters for discriminator')


    parser.add_argument('--Train_H', type=int, default=480, help='The size of image')
    parser.add_argument('--Train_W', type=int, default=720, help='The size of image')


    parser.add_argument('--test_num', type=int, default=10, help='The number of images generated by the test')


    parser.add_argument('--vgg_model_path', type=str, default='../../pre_trained_model/imagenet-vgg-verydeep-19.mat', help='The directory the pre-trained model was saved')
    parser.add_argument('--content_layers', nargs='+', type=str, default=['relu2_2'], help='VGG19 layers used for content loss')
    parser.add_argument('--content_layer_weights', nargs='+', type=float, default=[1.0], help='Content loss is multiplied by weight')


    parser.add_argument('--checkpoint_dir', type=str, default='checkpoint',
                        help='Directory name to save the checkpoints')
    parser.add_argument('--result_dir', type=str, default='results',
                        help='Directory name to save the generated images')
    parser.add_argument('--log_dir', type=str, default='logs',
                        help='Directory name to save training logs')
    parser.add_argument('--sample_dir', type=str, default='samples',
                        help='Directory name to save the samples on training')
    parser.add_argument('--fmvis_dir', type=str, default='FM_VIS',
                        help='Directory name to save the intermediate feature maps on training')
    parser.add_argument('--epoch_metric_dir', type=str, default='epochs_metric',
                        help='Directory name to save the samples on training')

    return check_args(parser.parse_args())

"""checking arguments"""
def check_args(args):
    # --checkpoint_dir
    check_folder(args.checkpoint_dir)

    # --result_dir
    check_folder(args.result_dir)

    # --result_dir
    check_folder(args.log_dir)

    # --sample_dir
    check_folder(args.sample_dir)

    # --sample_dir
    check_folder(args.epoch_metric_dir)

    # --epoch
    try:
        assert args.epoch >= 1
    except:
        print('number of epochs must be larger than or equal to one')

    # --batch_size
    try:
        assert args.batch_size >= 1
    except:
        print('batch size must be larger than or equal to one')
    return args


"""main"""
def main():
    # parse arguments
    args = parse_args()
    if args is None:
      exit()

    # open session
    #os.environ["CUDA_VISIBLE_DEVICES"] = "0"
    #config = tf.ConfigProto()
    #config.gpu_options.allow_growth = False
    #with tf.Session() as sess:
    with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:
        gan = DENSE_DR(sess, args)

        # build graph
        gan.build_model()

        # show network architecture
        #show_all_variables()

        if args.phase == 'train' :
            # launch the graph in a session
            gan.train()

            # visualize learned generator
            # gan.visualize_results(args.epoch - 1)

            print(" [*] Training finished!")

        if args.phase == 'test' :
            gan.test()
            print(" [*] Test finished!")

if __name__ == '__main__':
    main()
